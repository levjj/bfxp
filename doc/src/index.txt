restindex
    format: rest
    page-title: Brainfuck 2000
    encoding: utf-8
    output-encoding: None
    file: style.css
/restindex

==============
Brainfuck 2000
==============
-------------------------------------
The convenient way to write Brainfuck
-------------------------------------

:Author: Christopher Schuster
:Version: $Revision$

.. contents::

Introduction
============

Brainfuck 2000 is a programming language based on Brainfuck
[#brainfuck]_ with a different syntax and some convenience functions.
The purpose of Brainfuck 2000 is to show that it is possible to
implement a language by using COLA [#cola]_ that evaluates to an
abstract syntax tree (AST) of a Brainfuck proram. By exchanging the
semantics of this AST it is possible to translated Brainfuck 2000 to
normal Brianfuck source code or to machine code just in time for
execution.

This document expects that you are already familar with Brainfuck.
Although the syntax of Brainfuck 2000 is different from its ancestor
the semantics almost the same and are not dealed in this document.

Examples
========

Hello World
-----------

A simple 'Hello World' program can be written as ::

	="Hello World";
	puts;

The first Statement stores the string into in the cells of the current memory location and moves the pointer back to the beginning. The second statement goes through the memory cells and prints each characters. All these actions can be easily mapped to Brainfuck.

Calculator
----------

Adding and subtracting some small integers is very easy ::

	=23;  # initializes first cell to 23
	-19;  # subtracts 19
	+5;   # adds 5
	puti; # prints '9'

All these commands operate on the first memory cell. 

Installation
============

#. Setting up COLA

   Download the latest version of COLA_ from subversion repository ::

     $ svn co http://piumarta.com/svn2/idst/trunk idst

   Compile COLA by executing ``make`` in the root dictionary. You need
   some programs like ``make``, ``gcc`` and header files installed. ::

     $ ls
     doc  function  Makefile  object  README  system
     $ make

#. Setting up Brainfuck 2000

   You can obtain the last version from subversion repository ::

     $ svn co https://svn.livoris.de/bf2k/trunk bf2k

   Modify the Makefile to point to Jolt2 executable. ::

     JOLT2 = /path/to/your/cola/installation*/function/jolt2*
     ...

#. Running the examples

   There are some examples provided. You can run them by executing ::

     $ make test
     $ make test-calc
     ...

#. Running your own Brainfuck 2000 programs

   The best way to run your programs is to write a Makefile in the same
   manner as the provided Makefile.

   Beware that every Brainfuck 2000 source file must start with the
   following line: ::

     { bf2k-program }
     # source comes here ...

Language Reference
==================

Comments
--------

Everthing written behind a hash symbol (``#``) is a comment and will be ignored.

Literals
--------

There are two literals:

*Numbers*
	are expected in decimal format without leading minus or fractions.
	
	(Examples: 2, 4, 23)

*Strings*
	are enclosed with double quotation marks and every character except double quotation mark, ``\0`` are allowed.
	
	(Examples: \"abc\", \"a\\nb\")

Statements
----------

Statements always end with a semicolon with the exception of the while loop.

``=`` *number* ``;``
	Sets the value at the current pointer position to *number*.

``+`` [*number*] ``;``
	Adds *number* to the value at the current pointer position.
	If *number* is omitted then *1* will be used instead.

``-`` [*number*] ``;``
	Subtracts *number* from the value at the current pointer position.
	If *number* is omitted then *1* will be used instead.

``next;``
	Moves the pointer forward to the next cell.

``prev;``
	Moves the pointer back to the previous cell.

``putc;``
	Prints the character at the current pointer position to standard out.

``puti;``
	Prints the number at the current pointer position to standard out.
	
.. Note:: In the current implementation the number must be in the range
          from 0 to 9. For multi-digit output the mod-operation is
          needed. This is difficult to implement without using
          auxiliary cells.

``puts;``
	Prints the string at the current pointer position to standard out
	and moves the pointer to the end of the string. Beware that the
	string that starts from the current pointer position must be
	null-terminated.

``=`` *string* ``;``
	Stores the *string* into the values of the cells beginning with the
	current pointer position and moves the pointer back to the first
	character of the *string*. The cell at the end of the *string* is
	set to *0* to make the *string* null-terminated.

``while {`` *instructions* ``}``
	While the value at the current pointer position is greater than *0* 
	the *instructions* will be repeatedly executed. The pointer
	position might change during the execution. If the *instructions*
	are omitted there will be an infinite loop (if the value at the
	current pointer position if greater than *0*).

Extensions
==========

Conditions
----------

At this moment every conditional execution has to use a ``while``-loop.
One possible extension would be to introduce a new
``if``-``then``-``else``-statement to make the code better readable ::

  if {
    +3;
  } else {
    puti;
  }

Expressions
-----------

At this moment every condition is a while loop has only one built-in
condition. It would be possible to define a `while`-statement that is
able to evaluate a simple expression as condition as in this example ::

  while <= 9 {
    puti;
    +1;
  }


Beyond Brainfuck 2000
---------------------

There are further possible extensions. In fact, Brainfuck 2000 will be the
first step to an implementation of a simple imperative language that
will be compiled to Brainfuck. This imperative language should be
convenient enough to write a Brainfuck interpreter without using
pointer-move instructions anymore.

References
==========

Acknowledgments
---------------
Thanks to Dr. Haupt [#haupt]_ who has inspired me to examine COLA_ and to write this language implementation. Additional thanks go to Ian Piumarta for implementing the Jolt2 implementation of COLA_.

Ressources
----------

.. [#brainfuck] http://en.wikipedia.org/wiki/Brainfuck
.. [#cola] http://piumarta.com/software/cola/
.. [#haupt] http://www.hpi.uni-potsdam.de/hirschfeld/people/haupt
